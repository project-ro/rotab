name: main_template

depends:
  - user_filter_template
  - transaction_summary_template

processes:
  - name: transaction_enrichment
    description: |
      This process enriches user transactions by filtering users based on age and
      transactions based on amount, then merging the two datasets and aggregating by segment.
    io:
      inputs:
        - name: filtered_users
          io_type: csv
          path: ../../source/outputs/filtered_users.csv
          schema: filtered_users

        - name: filtered_transactions
          io_type: csv
          path: ../../source/outputs/filtered_transactions.csv
          schema: filtered_transactions

      outputs:
        - name: final_output
          io_type: csv
          path: ../../source/outputs/final_output.csv
          schema: final_output

    steps:
      - name: filter_users_main
        with: filtered_users
        mutate:
          - filter: age > ${params.min_age}
          - derive: |
              log_age = log(age)
              age_bucket = age // 10 * 10
              year = year(age)
              birthday = "1956-03-23"
              base_date = "2000-01-01"
          - derive: |
              days_since_birthday = days_since_last_birthday(birthday, base_date)
          - select: [user_id, log_age, age_bucket, days_since_birthday]
        as: filtered_users_main
        when: ${params.test}

      - name: filter_transactions_main
        with: filtered_transactions
        mutate:
          - filter: amount > 1000
          - derive: |
              high_value = int(abs(amount)) > 5000
        as: filtered_trans

      - name: merge_transactions
        with: [filtered_users_main, filtered_trans]
        transform: merge(left=filtered_users_main, right=filtered_trans, on=['user_id'])
        as: enriched

      - name: derive_segment
        with: enriched
        mutate:
          - derive: |
              segment = str(age_bucket) + str(log_age)
        as: enriched_with_segment
        with, as: enriched, enriched_with_segment

      - name: groupby_segment
        with: enriched_with_segment
        transform: |
          groupby_agg(table=enriched_with_segment, by="segment", aggregations={"amount": "mean", "high_value": "sum"})
        as: final_output
